{"version":3,"file":"86.main.js","mappings":"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","sources":["webpack://copilot-testing/./src/minesweeper/mineSweeper.ts","webpack://copilot-testing/./src/minesweeper/minesweeper-view.ts"],"sourcesContent":["export type Cell = {\r\n  isMine: boolean;\r\n  isRevealed: boolean;\r\n  isFlagged: boolean;\r\n  adjacentMines: number;\r\n};\r\n\r\nexport class Minesweeper {\r\n  board: Cell[][];\r\n  rows: number;\r\n  cols: number;\r\n  mines: number;\r\n  gameOver: boolean;\r\n\r\n  constructor(rows = 8, cols = 8, mines = 10) {\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n    this.mines = mines;\r\n    this.gameOver = false;\r\n    this.board = this.generateBoard();\r\n  }\r\n\r\n  generateBoard(): Cell[][] {\r\n    // Create empty board\r\n    const board: Cell[][] = Array.from({ length: this.rows }, () =>\r\n      Array.from({ length: this.cols }, () => ({\r\n        isMine: false,\r\n        isRevealed: false,\r\n        isFlagged: false,\r\n        adjacentMines: 0,\r\n      }))\r\n    );\r\n    // Place mines\r\n    let placed = 0;\r\n    while (placed < this.mines) {\r\n      const r = Math.floor(Math.random() * this.rows);\r\n      const c = Math.floor(Math.random() * this.cols);\r\n      if (!board[r]![c]!.isMine) {\r\n        board[r]![c]!.isMine = true;\r\n        placed++;\r\n      }\r\n    }\r\n    // Calculate adjacent mines\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (!board[r]![c]!.isMine) {\r\n          board[r]![c]!.adjacentMines = this.countAdjacentMines(board, r, c);\r\n        }\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  countAdjacentMines(board: Cell[][], row: number, col: number): number {\r\n    let count = 0;\r\n    for (let dr = -1; dr <= 1; dr++) {\r\n      for (let dc = -1; dc <= 1; dc++) {\r\n        if (dr === 0 && dc === 0) continue;\r\n        const nr = row + dr;\r\n        const nc = col + dc;\r\n        if (nr >= 0 && nr < this.rows && nc >= 0 && nc < this.cols) {\r\n          if (board[nr]![nc]!.isMine) count++;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  reveal(row: number, col: number): void {\r\n    if (this.gameOver || this.board[row]![col]!.isRevealed || this.board[row]![col]!.isFlagged) return;\r\n    this.board[row]![col]!.isRevealed = true;\r\n    if (this.board[row]![col]!.isMine) {\r\n      this.gameOver = true;\r\n      return;\r\n    }\r\n    if (this.board[row]![col]!.adjacentMines === 0) {\r\n      for (let dr = -1; dr <= 1; dr++) {\r\n        for (let dc = -1; dc <= 1; dc++) {\r\n          if (dr === 0 && dc === 0) continue;\r\n          const nr = row + dr;\r\n          const nc = col + dc;\r\n          if (nr >= 0 && nr < this.rows && nc >= 0 && nc < this.cols) {\r\n            if (!this.board[nr]![nc]!.isRevealed) {\r\n              this.reveal(nr, nc);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleFlag(row: number, col: number): void {\r\n  if (this.gameOver || this.board[row]![col]!.isRevealed) return;\r\n  this.board[row]![col]!.isFlagged = !this.board[row]![col]!.isFlagged;\r\n  }\r\n\r\n  isWin(): boolean {\r\n    if (!this.board) return false;\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        const cell = this.board[r]?.[c];\r\n        if (!cell) return false;\r\n        if (!cell.isMine && !cell.isRevealed) return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { Minesweeper } from './mineSweeper';\r\n\r\nexport class MinesweeperView {\r\n  private game: Minesweeper;\r\n  private container: HTMLElement;\r\n\r\n  constructor(containerId: string, rows = 8, cols = 8, mines = 10) {\r\n    this.game = new Minesweeper(rows, cols, mines);\r\n    const el = document.getElementById(containerId);\r\n    if (!el) throw new Error('Container not found');\r\n    this.container = el;\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    this.container.innerHTML = '';\r\n    const table = document.createElement('table');\r\n    table.style.borderCollapse = 'collapse';\r\n    for (let r = 0; r < this.game.rows; r++) {\r\n      const tr = document.createElement('tr');\r\n      for (let c = 0; c < this.game.cols; c++) {\r\n  const cell = this.game.board[r]![c]!;\r\n        const td = document.createElement('td');\r\n        td.style.width = '32px';\r\n        td.style.height = '32px';\r\n        td.style.textAlign = 'center';\r\n        td.style.border = '1px solid #888';\r\n        td.style.background = cell.isRevealed ? '#e0e0e0' : '#b0b0b0';\r\n        td.style.cursor = cell.isRevealed ? 'default' : 'pointer';\r\n        if (cell.isRevealed) {\r\n          if (cell.isMine) {\r\n            td.textContent = 'ðŸ’£';\r\n            td.style.background = '#ffb3b3';\r\n          } else if (cell.adjacentMines > 0) {\r\n            td.textContent = String(cell.adjacentMines);\r\n            td.style.color = '#333';\r\n          }\r\n        } else if (cell.isFlagged) {\r\n          td.textContent = 'ðŸš©';\r\n        }\r\n        td.oncontextmenu = (e) => {\r\n          e.preventDefault();\r\n          this.game.toggleFlag(r, c);\r\n          this.render();\r\n        };\r\n        td.onclick = () => {\r\n          this.game.reveal(r, c);\r\n          this.render();\r\n          if (this.game.gameOver) {\r\n            setTimeout(() => {\r\n            alert('Game Over!');\r\n            location.reload();\r\n          }, 100);\r\n          } else if (this.game.isWin()) {\r\n            setTimeout(() => {\r\n            alert('You Win!');\r\n            location.reload();\r\n          }, 100);\r\n          }\r\n        };\r\n        tr.appendChild(td);\r\n      }\r\n      table.appendChild(tr);\r\n    }\r\n    this.container.appendChild(table);\r\n  }\r\n}\r\n"],"names":["rows","cols","mines","this","gameOver","board","generateBoard","Array","from","length","isMine","isRevealed","isFlagged","adjacentMines","placed","r","Math","floor","random","c","countAdjacentMines","row","col","count","dr","dc","nr","nc","reveal","toggleFlag","isWin","cell","containerId","game","Minesweeper","el","document","getElementById","Error","container","render","innerHTML","table","createElement","style","borderCollapse","tr","td","width","height","textAlign","border","background","cursor","textContent","String","color","oncontextmenu","e","preventDefault","onclick","setTimeout","alert","location","reload","appendChild"],"sourceRoot":""}